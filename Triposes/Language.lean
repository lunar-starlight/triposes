import Triposes.Basic

open CategoryTheory
open MonoidalCategory


namespace Language

  section Structure
    universe u v
    variable {ùíû : Type u} [Category.{v, u} ùíû] [fp : ChosenFiniteProducts ùíû] [ccc : CartesianClosed ùíû]

    /- Fix a tripos -/
    variable {P : ùíû·µí·µñ ‚•§ HeytAlg} [T : Tripos P]

    -- /- To simplify the definition of `proj`, we use the terminal object of `ùíû` as the default element of `ùíû`. -/
    -- instance : Inhabited ùíû where default := ùüô_ ùíû

    /-- The product of a list of objects, where we make sure that the product of `[A]` is `A`, rather than `A ‚äó ùüô_ ùíû`. -/
    @[reducible]
    def listProd : Lean.AssocList Lean.Name ùíû ‚Üí ùíû
    | .nil => ùüô_ ùíû
    | .cons _ A .nil => A
    | .cons _ A As => A ‚äó listProd As

    -- @[simp]
    -- def lookup (As : Lean.AssocList Lean.Name ùíû) (x : Lean.Name) : ùíû := (As.find? x).getD (ùüô_ ùíû)

    -- /-- The k-th projection from a product, or the terminal morphism if the index is invalid -/
    -- @[reducible]
    -- def proj (As : Lean.AssocList Lean.Name ùíû) (x : Lean.Name) : listProd As ‚ü∂ lookup As x :=
    --   match As  with
    --   | .nil => fp.toUnit _ -- invalid index

    --   | .cons x' A .nil =>
    --     if h : x' = x then
    --       (by
    --        simp [Lean.AssocList.find?, h]
    --        exact ùüô A)
    --     else
    --       (by
    --        simp [Lean.AssocList.find?, not_beq_of_ne h]
    --        exact fp.toUnit _)

    --   | .cons x' A (.cons y B Bs) =>
    --     if h : x' = x then
    --       (by
    --       simp [Lean.AssocList.find?, h]
    --       exact fp.fst _ _
    --       )
    --     else
    --       (by
    --        simp [Lean.AssocList.find?, not_beq_of_ne h]
    --        exact fp.snd _ _ ‚â´ proj (.cons y B Bs) x)

    -- /-- Given an association list of objects `As = [x‚ÇÄ : A‚ÇÄ, ‚Ä¶, x‚Çô : A‚Çô]` we can form expressions that denote
    --     morphisms `A‚ÇÄ ‚äó ‚ãØ ‚äó A‚Çô ‚ü∂ B` but are written as if objects are sets. -/
    -- inductive Expr (As : Lean.AssocList Lean.Name ùíû) : ùíû ‚Üí Type _ where
    --   /-- Variable `var x` refers to the `x`-th element of `As`. -/
    --   | var : ‚àÄ (x : Lean.Name), Expr As (lookup As x)
    --   /-- The unique element of the terminal object -/
    --   | tt : Expr As (ùüô_ _)
    --   /-- Ordered pair -/
    --   | pair : ‚àÄ {B C}, Expr As B ‚Üí Expr As C ‚Üí Expr As (B ‚äó C)
    --   /-- First projection -/
    --   | fst : ‚àÄ {B C}, Expr As (B ‚äó C) ‚Üí Expr As B
    --   /-- Second projection -/
    --   | snd : ‚àÄ {B C}, Expr As (B ‚äó C) ‚Üí Expr As C
    --   /-- Application of a morphism -/
    --   | app : ‚àÄ {B C : ùíû}, (B ‚ü∂ C) ‚Üí Expr As B ‚Üí Expr As C


    -- /-- Evaluate an expression to the corresponding morphism -/
    -- @[reducible]
    -- def Expr.eval (As : Lean.AssocList Lean.Name ùíû) {B : ùíû} : Expr As B ‚Üí (listProd As ‚ü∂ B)
    --   | .var k => proj As k
    --   | .tt => fp.toUnit _
    --   | .pair a b => fp.lift a.eval b.eval
    --   | .fst a => a.eval ‚â´ fp.fst _ _
    --   | .snd a => a.eval ‚â´ fp.snd _ _
    --   | .app f a => a.eval ‚â´ f


    /-- `Formula As` denotes a predicate in `P (listProd As)`.
        It should be easy to add other connectives and quantifiers. -/
    inductive Formula : Lean.AssocList Lean.Name ùíû ‚Üí Type _ where
      /-- Application of a predicate to an expression -/
      --   | `($Œì:fpcontext ‚ä¢‚Çï ‚ü™ $f:term | $t:fpterm ‚ü´) => do
      -- let t ‚Üê `($Œì:fpcontext ‚ä¢‚Çë $t)
      -- `(P‚ÇÅ $t $f)
    | app : ‚àÄ {B As}, P‚ÇÄ (P := P) (listProd B) ‚Üí (listProd As ‚ü∂ listProd B) ‚Üí Formula As
      /-- The true predicate -/
    | tru : ‚àÄ {As}, Formula As
      /-- The false predicate -/
    | fal : ‚àÄ {As}, Formula As
      /-- Conjunction -/
    | conj : ‚àÄ {As}, Formula As ‚Üí Formula As ‚Üí Formula As
      /-- Disjunction -/
    | disj : ‚àÄ {As}, Formula As ‚Üí Formula As ‚Üí Formula As
      /-- Implication -/
    | impl : ‚àÄ {As}, Formula As ‚Üí Formula As ‚Üí Formula As
      /-- Universal quantifier -/
    | all : ‚àÄ {Bs As}, (listProd Bs ‚ü∂ listProd As) ‚Üí Formula Bs ‚Üí Formula As
      /-- Existential quantifier -/
    | any : ‚àÄ {Bs As}, (listProd Bs ‚ü∂ listProd As) ‚Üí Formula Bs ‚Üí Formula As

    def Formula.eval {As : Lean.AssocList Lean.Name ùíû} : Formula (P := P) As ‚Üí P‚ÇÄ (P := P) (listProd As)
    | .app œÅ f => P‚ÇÅ f œÅ
    | .tru => ‚ä§
    | .fal => ‚ä•
    | .conj œÜ œà => eval œÜ ‚äì eval œà
    | .disj œÜ œà => eval œÜ ‚äî eval œà
    | .impl œÜ œà => eval œÜ ‚á® eval œà
    | .all f œÜ => (Tripos.ùî∏ f).map (eval œÜ)
    | .any f œÜ => (Tripos.ùîº f).map (eval œÜ)
  end Structure

  section Syntax
    open Lean

    scoped infixl:100 " ‚áî " => bihimp

    declare_syntax_cat fpformula
    syntax "‚ä§" : fpformula
    syntax "‚ä•" : fpformula
    syntax:70 fpformula "‚äì" fpformula:71 : fpformula
    syntax:60 fpformula "‚äî" fpformula:61 : fpformula
    syntax:50 fpformula "‚áí" fpformula:51 : fpformula
    syntax:50 fpformula "‚áî" fpformula:51 : fpformula
    syntax:80 "‚àÄ" typing_judgement "," fpformula:79 : fpformula
    syntax:80 "‚àÉ" typing_judgement "," fpformula:79 : fpformula
    syntax:100 "(" fpformula ")" : fpformula
    syntax:1025 "‚ü™" term "|" fpterm "‚ü´" : fpformula

    syntax:30 fpcontext "‚ä¢‚Çï" fpformula : term
    syntax:30 fpcontext "‚ä¢" fpformula : term

    partial def unfold : TSyntax `fpcontext ‚Üí MacroM (Array (TSyntax `typing_judgement))
    | `(fpcontext| ) => pure Array.empty
    | `(fpcontext| $x:ident : $A:term) =>
      do
        let j ‚Üê `(typing_judgement| $x:ident : $A)
        return Array.mk [j]
    | `(fpcontext| $x:ident : $A:term, $Œì:typing_judgement,*) =>
      do
        let Œì ‚Üê `(fpcontext| $Œì:typing_judgement,*)
        let As ‚Üê unfold Œì
        let j ‚Üê `(typing_judgement| $x:ident : $A)
        return Array.mk (j :: As.toList)
    | _ => Macro.throwError "invalid context syntax"

    -- macro_rules
    -- | `($Œì:fpcontext ‚ä¢‚Çï ‚ü™ $f:term | $t:fpterm ‚ü´) => do
    --   let t ‚Üê `($Œì:fpcontext ‚ä¢‚Çë $t)
    --   `(P‚ÇÅ $t $f)
    -- | `($Œì:fpcontext ‚ä¢‚Çï $s:fpformula ‚äì $t:fpformula) => do
    --   let s ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $s)
    --   let t ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $t)
    --   `($s ‚äì $t)
    -- | `($Œì:fpcontext ‚ä¢‚Çï $s:fpformula ‚äî $t:fpformula) => do
    --   let s ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $s)
    --   let t ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $t)
    --   `($s ‚äî $t)
    -- | `($Œì:fpcontext ‚ä¢‚Çï $s:fpformula ‚áí $t:fpformula) => do
    --   let s ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $s)
    --   let t ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $t)
    --   `($s ‚á® $t)
    -- | `($Œì:fpcontext ‚ä¢‚Çï $s:fpformula ‚áî $t:fpformula) => do
    --   let s ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $s)
    --   let t ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $t)
    --   `($s ‚áî $t)
    -- | `($_:fpcontext ‚ä¢‚Çï ‚ä§) => `(‚ä§)
    -- | `($_:fpcontext ‚ä¢‚Çï ‚ä•) => `(‚ä•)
    -- | `($jdgs:typing_judgement,* ‚ä¢‚Çï ‚àÄ $y:ident : $Y:term , $t:fpformula) => do
    --   let t ‚Üê `($jdgs:typing_judgement,* , $y:ident : $Y:term ‚ä¢‚Çï $t)
    --   `((Tripos.ùî∏ (ChosenFiniteProducts.fst _ _)).map $t)
    -- | `($jdgs:typing_judgement,* ‚ä¢‚Çï ‚àÉ $y:ident : $Y:term , $t:fpformula) => do
    --   let t ‚Üê `($jdgs:typing_judgement,* , $y:ident : $Y:term  ‚ä¢‚Çï $t)
    --   `((Tripos.ùîº (ChosenFiniteProducts.fst _ _)).map $t)
    -- | `($Œì:fpcontext ‚ä¢‚Çï ($t:fpformula)) => `($Œì:fpcontext ‚ä¢‚Çï $t)
    -- | `($Œì:fpcontext ‚ä¢ $t:fpformula) => `(($Œì:fpcontext ‚ä¢‚Çï $t) ‚â• ‚ä§)

    macro_rules
    | `($Œì:fpcontext ‚ä¢‚Çï ‚ü™ $f:term | $t:fpterm ‚ü´) => do
      let t ‚Üê `($Œì:fpcontext ‚ä¢‚Çë $t)
      `(Formula.app $f $t)
    | `($Œì:fpcontext ‚ä¢‚Çï $s:fpformula ‚äì $t:fpformula) => do
      let s ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $s)
      let t ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $t)
      `(Formula.conj $s $t)
    | `($Œì:fpcontext ‚ä¢‚Çï $s:fpformula ‚äî $t:fpformula) => do
      let s ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $s)
      let t ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $t)
      `(Formula.disj $s $t)
    | `($Œì:fpcontext ‚ä¢‚Çï $s:fpformula ‚áí $t:fpformula) => do
      let s ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $s)
      let t ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $t)
      `(Formula.impl $s $t)
    | `($Œì:fpcontext ‚ä¢‚Çï $s:fpformula ‚áî $t:fpformula) => do
      let s ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $s)
      let t ‚Üê `($Œì:fpcontext ‚ä¢‚Çï $t)
      `(Formula.conj (Formula.impl $s $t) (Formula.impl $t $s))
    | `($_:fpcontext ‚ä¢‚Çï ‚ä§) => `(Formula.tru)
    | `($_:fpcontext ‚ä¢‚Çï ‚ä•) => `(Formula.fal)
    | `($jdgs:typing_judgement,* ‚ä¢‚Çï ‚àÄ $y:ident : $Y:term , $t:fpformula) => do
      let t ‚Üê `($jdgs:typing_judgement,* , $y:ident : $Y:term ‚ä¢‚Çï $t)
      `(Formula.all (ChosenFiniteProducts.fst _ _) $t)
    | `($jdgs:typing_judgement,* ‚ä¢‚Çï ‚àÉ $y:ident : $Y:term , $t:fpformula) => do
      let t ‚Üê `($jdgs:typing_judgement,* , $y:ident : $Y:term  ‚ä¢‚Çï $t)
      `(Formula.any (ChosenFiniteProducts.fst _ _) $t)
    | `($Œì:fpcontext ‚ä¢‚Çï ($t:fpformula)) => `(Formula.eval ($Œì:fpcontext ‚ä¢‚Çï $t))
    | `($Œì:fpcontext ‚ä¢ $t:fpformula) => `((Formula.eval (T := by infer_instance) ($Œì:fpcontext ‚ä¢‚Çï $t)) ‚â• ‚ä§)

  end Syntax

end Language
