import Triposes.Language.Basic
import Triposes.Language.Properties

open Language
open CategoryTheory
open MonoidalCategory

universe u v
variable {ùíû : Type u} [Category.{v, u} ùíû] [fp : ChosenFiniteProducts ùíû] [ccc : CartesianClosed ùíû]

/- Fix a tripos -/
variable {P : ùíû·µí·µñ ‚•§ HeytAlg} [T : Tripos P]

section PERdef
  syntax:90 fpterm "=[" term "]" fpterm:70 : fpformula
  local macro_rules
  | `($Œì:fpcontext ‚ä¢‚Çï $x:fpterm =[ $œÅ:term ] $y:fpterm) => `($Œì:fpcontext ‚ä¢‚Çï ‚ü™ $œÅ | ‚ü®$x, $y‚ü© ‚ü´) --  =[]

  class PER (X : ùíû) where
    rel   : P‚ÇÄ (P := P) (X ‚äó X)
    sym   : a : X, b : X        ‚ä¢ a =[rel] b ‚áí b =[rel] a
    -- sym   : a : X, b : X        ‚ä¢ ‚ü™rel | ‚ü®a, b‚ü©‚ü´ ‚áí ‚ü™rel | ‚ü®b, a‚ü©‚ü´
    trans : a : X, b : X, c : X ‚ä¢ a =[rel] b ‚äì b =[rel] c ‚áí a =[rel] c
end PERdef

namespace Language
  syntax:90 fpterm "=" fpterm:70 : fpformula
  macro_rules
  | `($Œì:fpcontext ‚ä¢‚Çï $x:fpterm = $y:fpterm) =>
    `($Œì:fpcontext ‚ä¢‚Çï ‚ü™ PER.rel (X := _) | ‚ü®$x, $y‚ü© ‚ü´)
  | `($Œì:fpcontext ‚ä¢‚Çï $x:fpterm =[ $œÅ:term ] $y:fpterm) =>
    `($Œì:fpcontext ‚ä¢‚Çï ‚ü™ PER.rel (X := $œÅ) | ‚ü®$x, $y‚ü© ‚ü´)
end Language

section PERHomDef
  syntax:1025 term:1024 "‚∏®" fpterm "‚∏© =" fpterm : fpformula
  local macro_rules
  | `($Œì:fpcontext ‚ä¢‚Çï $map:term ‚∏® $x:fpterm ‚∏© = $y:fpterm) => `($Œì:fpcontext ‚ä¢‚Çï ‚ü™$map | ‚ü®$x, $y‚ü©‚ü´)

  class PERHom {X Y : ùíû} (œÅX : PER (P := P) X) (œÅY : PER (P := P) Y) where
    hom : P‚ÇÄ (P := P) (X ‚äó Y)
    congrDom : x : X, x' : X, y : Y ‚ä¢ x = x' ‚äì hom‚∏®x'‚∏© = y ‚áí hom‚∏®x‚∏© = y
    congrCod : x : X, y : Y, y' : Y ‚ä¢ hom‚∏®x‚∏© = y ‚äì y = y' ‚áí hom‚∏®x‚∏© = y'
    unique   : x : X, y : Y, y' : Y ‚ä¢ hom‚∏®x‚∏© = y ‚äì hom‚∏®x‚∏© = y' ‚áí y = y'
    total    : x : X                ‚ä¢ x = x ‚áî ‚àÉ y : Y , hom‚∏®x‚∏© = y

end PERHomDef

namespace Language
  macro_rules
  | `($Œì:fpcontext ‚ä¢‚Çï $hom:term ‚∏® $x:fpterm ‚∏© = $y:fpterm) =>
    `($Œì:fpcontext ‚ä¢‚Çï ‚ü™ PERHom.hom (self := $hom) | ‚ü®$x, $y‚ü©‚ü´)
end Language

namespace PERHom
  variable {X Y Z : ùíû} {œÅX : PER (P := P) X} {œÅY : PER (P := P) Y} {œÅZ : PER (P := P) Z}

  @[reducible]
  def congrDomTerm  (f : PERHom œÅX œÅY) := x : X, x' : X, y : Y ‚ä¢‚Çï x = x' ‚äì f‚∏®x'‚∏© = y ‚áí f‚∏®x‚∏© = y
  @[reducible]
  def congrCodTerm  (f : PERHom œÅX œÅY) := x : X, y : Y, y' : Y ‚ä¢‚Çï f‚∏®x‚∏© = y ‚äì y = y' ‚áí f‚∏®x‚∏© = y'
  @[reducible]
  def uniqueTerm    (f : PERHom œÅX œÅY) := x : X, y : Y, y' : Y ‚ä¢‚Çï f‚∏®x‚∏© = y ‚äì f‚∏®x‚∏© = y' ‚áí y = y'
  @[reducible]
  def totalTerm     (f : PERHom œÅX œÅY) := x : X ‚ä¢‚Çï x = x ‚áî ‚àÉ y : Y , f‚∏®x‚∏© = y
  @[reducible]
  def totalTerm_mp  (f : PERHom œÅX œÅY) := x : X ‚ä¢‚Çï x = x ‚áí ‚àÉ y : Y , f‚∏®x‚∏© = y
  @[reducible]
  def totalTerm_mpr (f : PERHom œÅX œÅY) := x : X ‚ä¢‚Çï ‚àÉ y : Y , f‚∏®x‚∏© = y ‚áí x = x
  @[reducible]
  def total_mp      (f : PERHom œÅX œÅY) : x : X ‚ä¢ x = x ‚áí ‚àÉ y : Y , f‚∏®x‚∏© = y := by
    have ‚ü®total_mp, _‚ü© := le_inf_iff.mp f.total
    exact total_mp
  @[reducible]
  def total_mpr     (f : PERHom œÅX œÅY) : x : X ‚ä¢ (‚àÉ y : Y , f‚∏®x‚∏© = y) ‚áí x = x := by
    have ‚ü®_, total_mpr‚ü© := le_inf_iff.mp f.total
    exact total_mpr
end PERHom


-- variable {X Y Z : ùíû} {œÅX : PER (P := P) X} {œÅY : PER (P := P) Y} {œÅZ : PER (P := P) Z} (g : PERHom œÅY œÅZ) (f : PERHom œÅX œÅY) (h : PERHom œÅX œÅZ)
-- #check f.hom

section PERLemata

  variable {X Y Z : ùíû} {œÅX : PER (P := P) X} {œÅY : PER (P := P) Y} {œÅZ : PER (P := P) Z}
  open ChosenFiniteProducts
  open Tripos.TermLE

  omit fp ccc in lemma isTop_iff_forall_isTop (f : X ‚ü∂ Y) {t : P‚ÇÄ X} : isTop t ‚Üî isTop (T.ùî∏ f t) := by
    constructor
    ¬∑ simp
      rintro rfl
      exact T.ùî∏_top_eq_top
    ¬∑ rintro H
      apply isTop_le_isTop H
      exact forall_le (ùî∏ := T.ùî∏ f)

  omit ccc in theorem lift_diag {f : X ‚ü∂ Y} : lift f f = f ‚â´ diag := by unfold diag; aesop_cat
  omit ccc in theorem lift_snd_fst : lift (fp.snd X Y) (fp.fst X Y) = twist := by unfold twist; aesop_cat
  omit ccc in theorem comp_lift_left {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} : lift (f ‚â´ g) f = f ‚â´ lift g (ùüô _) := by aesop_cat
  omit ccc in theorem comp_lift_right {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} : lift f (f ‚â´ g) = f ‚â´ lift (ùüô _) g := by aesop_cat
  omit ccc in theorem lift_comp_fst_comp_snd {f : X ‚ü∂ Y ‚äó Z} : lift (f ‚â´ fp.fst _ _) (f ‚â´ fp.snd _ _) = f := by aesop_cat


  syntax "simp_proj" : tactic
  syntax "simp_proj_only" : tactic
  macro_rules
    | `(tactic| simp_proj_only) =>
      `(tactic| simp only
        [comp_lift, lift_fst, lift_snd, lift_diag, lift_snd_fst, lift_fst_snd, lift_comp_fst_comp_snd,
        ‚ÜêCategory.assoc, Category.id_comp, Category.comp_id, ‚ÜêP‚ÇÅ.map_comp_app, P‚ÇÅ.map_inf, P‚ÇÅ.map_sup, P‚ÇÅ.map_himp])
    | `(tactic| simp_proj) =>
      `(tactic| simp
        [comp_lift, lift_fst, lift_snd, lift_diag, lift_snd_fst, lift_fst_snd, lift_comp_fst_comp_snd,
        ‚ÜêCategory.assoc, Category.id_comp, Category.comp_id, ‚ÜêP‚ÇÅ.map_comp_app, P‚ÇÅ.map_inf, P‚ÇÅ.map_sup, P‚ÇÅ.map_himp])


  omit ccc in
  theorem PERHom.map_le_extent_dom (f: PERHom (T := T) œÅX œÅY)
    : x : X, y : Y ‚ä¢ f‚∏®x‚∏© = y ‚áí x = x := by
    apply (isTop_iff_forall_isTop (x : X, y : Y ‚ä¢‚Çë x)).mpr
    simp_proj
    conv =>
      enter [1, 2, 1, 2]
      rw [map_comp_app (P := P)]
    simp [T.ùî∏_congr_app]

    conv =>
      enter [1]
      tactic =>
        apply T.ùî∏_congr_app
        simp
    rw [T.frobenius]
    have cow := f.total_mpr
    simp at cow
    repeat unfold Formula.eval at cow
    exact cow

  omit ccc in theorem PERHom.map_le_extent_cod (f: PERHom (T := T) œÅX œÅY)
    : x : X, y : Y ‚ä¢ f‚∏®x‚∏© = y ‚áí y = y := by
    apply isTop_le_isTop f.unique
    exact {
      map := x : X, y : Y ‚ä¢‚Çë ‚ü®‚ü®x, y‚ü©, y‚ü©
      le := by
        rw [lift_diag]
        simp only [Category.comp_id, lift_fst_snd]
        rw [P‚ÇÅ.map_himp, P‚ÇÅ.map_inf]
        simp_proj_only
        simp
    }

  omit ccc in theorem PERHomDom (f: PERHom (T := T) œÅX œÅY)
    : x : X, y : Y ‚ä¢ f‚∏®x‚∏© = y ‚áí x = x ‚äì f‚∏®x‚∏© = y := by
    simp
    have := f.map_le_extent_dom
    simp at this
    exact this

  def PERHomComp (g : PERHom œÅY œÅZ) (f : PERHom œÅX œÅY) : PERHom œÅX œÅZ where
    hom := (x : X, z : Z ‚ä¢‚Çï ‚àÉ y : Y, (f‚∏®x‚∏© = y ‚äì g‚∏®y‚∏© = z)).eval
    congrDom := by
      simp_proj_only
      have isPB : IsPullback
        (x : X, x' : X, z : Z, y : Y ‚ä¢‚Çë ‚ü®‚ü®x, x'‚ü©, z‚ü©) (x : X, x' : X, z : Z, y : Y ‚ä¢‚Çë ‚ü®‚ü®x', z‚ü©, y‚ü©)
        (x : X, x' : X, z : Z ‚ä¢‚Çë ‚ü®x', z‚ü©) (x' : X, z : Z, y : Y ‚ä¢‚Çë ‚ü®x', z‚ü©) := by sorry
      have isPB' : IsPullback
        (x : X, x' : X, z : Z, y : Y ‚ä¢‚Çë ‚ü®‚ü®x, x'‚ü©, z‚ü©) (x : X, x' : X, z : Z, y : Y ‚ä¢‚Çë ‚ü®‚ü®x, z‚ü©, y‚ü©)
        (x : X, x' : X, z : Z ‚ä¢‚Çë ‚ü®x, z‚ü©) (x : X, z : Z, y : Y ‚ä¢‚Çë ‚ü®x, z‚ü©) := by sorry
      conv =>
        enter [1, 2]
        tactic =>
          have cow := T.BeckChevalleyùîº' isPB'
          apply funext_iff.mp at cow
          simp [comp_lift, lift_fst, lift_snd, lift_diag, lift_snd_fst, lift_fst_snd, lift_comp_fst_comp_snd,
                ‚ÜêCategory.assoc, Category.id_comp, Category.comp_id, ‚ÜêP‚ÇÅ.map_comp_app, P‚ÇÅ.map_inf, P‚ÇÅ.map_sup, P‚ÇÅ.map_himp] at cow
          conv at cow =>
            rhs; enter [2, 2, 1]
            tactic =>
              apply T.ùîº_congr
              simp_proj
          conv at cow =>
            enter [2, 1, 1]
            tactic =>
              apply T.ùîº_congr
              simp_proj
          symm; exact cow _
      conv =>
        enter [1, 1, 2]
        tactic =>
          have cow := T.BeckChevalleyùîº' isPB
          apply funext_iff.mp at cow
          simp [comp_lift, lift_fst, lift_snd, lift_diag, lift_snd_fst, lift_fst_snd, lift_comp_fst_comp_snd,
                ‚ÜêCategory.assoc, Category.id_comp, Category.comp_id, ‚ÜêP‚ÇÅ.map_comp_app, P‚ÇÅ.map_inf, P‚ÇÅ.map_sup, P‚ÇÅ.map_himp] at cow
          conv at cow =>
            rhs; enter [2, 2, 1]
            tactic =>
              apply T.ùîº_congr
              simp_proj
          conv at cow =>
            enter [2, 1, 1]
            tactic =>
              apply T.ùîº_congr
              simp_proj
          symm; exact cow _

      have H : (x : X, x' : X, z : Z ‚ä¢‚Çï x = x' ‚äì ‚àÉ y : Y, (f‚∏®x'‚∏© = y ‚äì g‚∏®y‚∏© = z) ‚áí ‚àÉ y : Y, (f‚∏®x‚∏© = y ‚äì g‚∏®y‚∏© = z))
             = (x : X, x' : X, z : Z ‚ä¢‚Çï ‚àÉ y : Y, (x = x' ‚äì f‚∏®x'‚∏© = y ‚äì g‚∏®y‚∏© = z) ‚áí ‚àÉ y : Y, (f‚∏®x‚∏© = y ‚äì g‚∏®y‚∏© = z)) := by
                simp
                simp_proj
                conv =>
                  rhs; enter [1, 2, 1, 1]
                  rw [‚ÜêP‚ÇÅ.map_comp]
                  exact P‚ÇÅ.map_comp_app
                rw [inf_assoc]
                conv =>
                  rhs; enter [1]
                  exact T.ùîº_frob_right
                simp
      simp only [Function.comp_apply, op_tensorObj, Category.assoc, map_inf, ge_iff_le, le_top]
      simp [comp_lift, lift_fst, lift_snd, lift_diag, lift_snd_fst, lift_fst_snd, lift_comp_fst_comp_snd,
            ‚ÜêCategory.assoc, Category.id_comp, Category.comp_id, ‚ÜêP‚ÇÅ.map_comp_app, P‚ÇÅ.map_inf, P‚ÇÅ.map_sup, P‚ÇÅ.map_himp] at H
      conv =>
        enter [2, 1, 2, 2]
        conv => enter [1]; tactic => symm; exact P‚ÇÅ.map_comp_app
        conv => enter [2]; tactic => symm; exact P‚ÇÅ.map_comp_app
        tactic => simp_proj
      conv =>
        enter [2, 2, 2]
        conv => enter [1]; tactic => symm; exact P‚ÇÅ.map_comp_app
        conv => enter [2]; tactic => symm; exact P‚ÇÅ.map_comp_app
        tactic => simp_proj
      rw [H]
      simp
      have weak_f_congrDom : isTop (P‚ÇÅ (x : X, x' : X, z : Z, y : Y ‚ä¢‚Çë ‚ü®‚ü®x, x'‚ü©, y‚ü©) f.congrDomTerm) := by
        apply P‚ÇÅ.map_isTop
        exact f.congrDom
      simp at weak_f_congrDom


        -- have H := f.congrDom
        -- simp at H

      -- let weak_f_congrDomTerm := P‚ÇÅ (x : X, x' : X, z : Z, y : Y ‚ä¢‚Çë ‚ü®‚ü®x, x'‚ü©, y‚ü©) f.congrDomTerm
      -- have weak_f_congrDom : isTop weak_f_congrDomTerm := by
      --   exact isTop_le_isTop f.congrDom {
      --     map := x : X, x' : X, z : Z, y : Y ‚ä¢‚Çë ‚ü®‚ü®x, x'‚ü©, y‚ü©
      --     le := by
      --       unfold weak_f_congrDomTerm
      --   }
        -- unfold isTop
        -- unfold weak_f_congrDomTerm
        -- apply ge_iff_le.mpr; trans
        -- ¬∑ apply ge_iff_le.mp
        --   exact f.congrDom
        -- ¬∑
      simp [comp_lift, lift_fst, lift_snd, lift_diag, lift_snd_fst, lift_fst_snd, lift_comp_fst_comp_snd,
            ‚ÜêCategory.assoc, Category.id_comp, Category.comp_id, ‚ÜêP‚ÇÅ.map_comp_app, P‚ÇÅ.map_inf, P‚ÇÅ.map_sup, P‚ÇÅ.map_himp] at H



      -- -- simp
      -- have H :
      --   -- calc
      --       (x : X, x' : X, z : Z ‚ä¢‚Çï x = x' ‚äì ‚àÉ y : Y, (f‚∏®x'‚∏© = y ‚äì g‚∏®y‚∏© = z) ‚áí ‚àÉ y : Y, (f‚∏®x‚∏© = y ‚äì g‚∏®y‚∏© = z))
      --     = (x : X, x' : X, z : Z ‚ä¢‚Çï ‚àÉ y : Y, (x = x' ‚äì f‚∏®x'‚∏© = y ‚äì g‚∏®y‚∏© = z) ‚áí ‚àÉ y : Y, (f‚∏®x‚∏© = y ‚äì g‚∏®y‚∏© = z)) := by
      --         simp
      --         simp_proj
      --         conv =>
      --           rhs; enter [1, 2, 1, 1]
      --           rw [‚ÜêP‚ÇÅ.map_comp]
      --           exact P‚ÇÅ.map_comp_app
      --         rw [inf_assoc]
      --         conv =>
      --           rhs; enter [1]
      --           exact T.ùîº_frob_right
      --         simp
      -- simp_proj_only
      -- -- apply le_himp_iff.mpr
      -- rw [H]


        -- _  (x : X, x' : X, z : Z ‚ä¢‚Çï ‚àÉ y : Y, (f‚∏®x‚∏© = y ‚äì g‚∏®y‚∏© = z) ‚áí ‚àÉ y : Y, (f‚∏®x‚∏© = y ‚äì g‚∏®y‚∏© = z)) := by simp_proj

          --     (x : X, x' : X, z : Z ‚ä¢‚Çï x = x' ‚äì ‚àÉ y : Y, (f‚∏®x'‚∏© = y ‚äì g‚∏®y‚∏© = z))
          --   ‚â§ (x : X, x' : X, z : Z ‚ä¢‚Çï ‚àÉ y : Y, (x = x' ‚äì f‚∏®x‚∏© = y ‚äì g‚∏®y‚∏© = z)) := by sorry
          -- _ ‚â§ (x : X, x' : X, z : Z ‚ä¢‚Çï ‚àÉ y : Y, (f‚∏®x‚∏© = y ‚äì g‚∏®y‚∏© = z)) := by sorry

      -- have H :=
      --   calc
      --     (x : X, x' : X, z : Z ‚ä¢‚Çï x = x' ‚äì ‚àÉ y : Y, (f‚∏®x‚∏© = y ‚äì g‚∏®y‚∏© = z))
      --       ‚â§ (x : X, x' : X, z : Z ‚ä¢‚Çï ‚àÉ y : Y, (x = x' ‚äì f‚∏®x‚∏© = y ‚äì g‚∏®y‚∏© = z)) := by
      --         simp_proj
      --         conv =>
      --           lhs; tactic => symm; exact T.ùîº_frob_right
      --         apply (T.ùîº _).map.monotone
      --         rw [inf_assoc, ‚ÜêP‚ÇÅ.map_comp]
      --         simp_proj_only
      --         conv => rhs; enter [1]; exact P‚ÇÅ.map_comp_app
      --         simp
      --     _ ‚â§ (x : X, x' : X, z : Z ‚ä¢‚Çï ‚àÉ y : Y, (x' = x ‚äì f‚∏®x‚∏© = y ‚äì g‚∏®y‚∏© = z)) := by sorry
      --     _ ‚â§ (x : X, x' : X, z : Z ‚ä¢‚Çï ‚àÉ y : Y, (f‚∏®x'‚∏© = y ‚äì g‚∏®y‚∏© = z)) := by
      --       simp_proj
      --       gcongr
      --       rw [‚ÜêP‚ÇÅ.map_comp]
      --       conv =>
      --         lhs; enter [1]
      --         tactic =>
      --           have cow : (fp.fst ((X ‚äó X) ‚äó Z) Y) ‚â´ (fp.fst _ _) = (lift ((fp.fst ((X ‚äó X) ‚äó Z) Y) ‚â´ (fp.fst (X ‚äó X) Z)) ((fp.snd ((X ‚äó X) ‚äó Z) Y))) ‚â´ (fp.fst (X ‚äó X) Y) := by aesop_cat
      --           have foo : P‚ÇÅ ((lift ((fp.fst ((X ‚äó X) ‚äó Z) Y) ‚â´ (fp.fst (X ‚äó X) Z)) ((fp.snd ((X ‚äó X) ‚äó Z) Y))) ‚â´ (fp.fst (X ‚äó X) Y)) œÅX.rel = P‚ÇÅ (lift ((fp.fst ((X ‚äó X) ‚äó Z) Y) ‚â´ (fp.fst (X ‚äó X) Z)) ((fp.snd ((X ‚äó X) ‚äó Z) Y))) (P‚ÇÅ (fp.fst (X ‚äó X) Y) œÅX.rel) := by rw [P‚ÇÅ.map_comp_app]
      --           trans
      --           ¬∑ rw [cow]
      --           ¬∑ exact foo
      --       conv =>
      --         lhs; enter [2]
      --         tactic =>
      --           have cow : lift (((fp.fst ((X ‚äó X) ‚äó Z) Y) ‚â´ (fp.fst _ _)) ‚â´ (fp.fst _ _)) (fp.snd _ _)
      --             = (lift ((fp.fst ((X ‚äó X) ‚äó Z) Y) ‚â´ (fp.fst (X ‚äó X) Z)) ((fp.snd ((X ‚äó X) ‚äó Z) Y))) ‚â´ ((fp.fst _ _) ‚äó ùüô _) := by aesop_cat
      --           have foo : P‚ÇÅ ((lift ((fp.fst ((X ‚äó X) ‚äó Z) Y) ‚â´ (fp.fst (X ‚äó X) Z)) ((fp.snd ((X ‚äó X) ‚äó Z) Y))) ‚â´ ((fp.fst _ _) ‚äó ùüô _)) f.hom = P‚ÇÅ (lift ((fp.fst ((X ‚äó X) ‚äó Z) Y) ‚â´ (fp.fst (X ‚äó X) Z)) ((fp.snd ((X ‚äó X) ‚äó Z) Y))) (P‚ÇÅ ((fp.fst _ _) ‚äó ùüô _) f.hom) := by
      --             conv => rhs; tactic => symm; exact P‚ÇÅ.map_comp_app
      --           trans
      --           ¬∑ rw [cow]
      --           ¬∑ exact foo
      --       conv =>
      --         rhs
      --         tactic =>
      --           have cow : lift (((fp.fst ((X ‚äó X) ‚äó Z) Y) ‚â´ (fp.fst _ _)) ‚â´ (fp.snd _ _)) (fp.snd _ _)
      --             = (lift ((fp.fst ((X ‚äó X) ‚äó Z) Y) ‚â´ (fp.fst (X ‚äó X) Z)) ((fp.snd ((X ‚äó X) ‚äó Z) Y))) ‚â´ ((fp.snd _ _) ‚äó ùüô _) := by aesop_cat
      --           have foo : P‚ÇÅ ((lift ((fp.fst ((X ‚äó X) ‚äó Z) Y) ‚â´ (fp.fst (X ‚äó X) Z)) ((fp.snd ((X ‚äó X) ‚äó Z) Y))) ‚â´ ((fp.snd _ _) ‚äó ùüô _)) f.hom = P‚ÇÅ (lift ((fp.fst ((X ‚äó X) ‚äó Z) Y) ‚â´ (fp.fst (X ‚äó X) Z)) ((fp.snd ((X ‚äó X) ‚äó Z) Y))) (P‚ÇÅ ((fp.snd _ _) ‚äó ùüô _) f.hom) := by rw [P‚ÇÅ.map_comp_app]
      --           trans
      --           ¬∑ rw [cow]
      --           ¬∑ exact foo
      --       rw [‚ÜêP‚ÇÅ.map_inf]
      --       apply OrderHomClass.GCongr.mono _
      --       simp

      --       have H := f.congrDom
      --       simp [comp_lift, lift_fst, lift_snd, lift_diag, lift_snd_fst, lift_fst_snd, lift_comp_fst_comp_snd,
      --             ‚ÜêCategory.assoc, Category.id_comp, Category.comp_id, ‚ÜêP‚ÇÅ.map_comp_app, P‚ÇÅ.map_inf, P‚ÇÅ.map_sup, P‚ÇÅ.map_himp]
      --           at H
      --       simp [Category.assoc] at H


      -- sorry



      -- simp_proj
      -- simp [comp_lift, lift_fst, lift_snd, lift_diag, lift_snd_fst, lift_fst_snd, lift_comp_fst_comp_snd,
      --       ‚ÜêCategory.assoc, Category.id_comp, Category.comp_id, ‚ÜêP‚ÇÅ.map_comp_app, P‚ÇÅ.map_inf, P‚ÇÅ.map_sup, P‚ÇÅ.map_himp]
      --      at H

      -- have isPB : IsPullback ((x : X, x' : X, z : Z, y : Y ‚ä¢‚Çë ‚ü®‚ü®x, x'‚ü©, z‚ü©)) (x : X, x' : X, z : Z, y : Y ‚ä¢‚Çë ‚ü®‚ü®x', z‚ü©, y‚ü©) (lift ((fp.fst (X ‚äó X) Z) ‚â´ (fp.snd _ _)) (fp.snd _ _)) (fp.fst _ _) := by sorry
      -- have isPB' : IsPullback ((x : X, x' : X, z : Z, y : Y ‚ä¢‚Çë ‚ü®‚ü®x, x'‚ü©, z‚ü©)) (x : X, x' : X, z : Z, y : Y ‚ä¢‚Çë ‚ü®‚ü®x, z‚ü©, y‚ü©) (lift ((fp.fst (X ‚äó X) Z) ‚â´ (fp.fst _ _)) (fp.snd _ _)) (fp.fst _ _) := by sorry

      -- conv =>
      --   lhs; enter [2]
      --   tactic => symm; exact T.BeckChevalleyùîº isPB
      -- conv =>
      --   rhs
      --   tactic => symm; exact T.BeckChevalleyùîº isPB'
      -- simp_proj


      -- conv =>
      --   rhs; enter [2, 1]
      --   tactic => symm; exact P‚ÇÅ.map_comp_app
      -- conv =>
      --   rhs; enter [2, 2]
      --   tactic => symm; exact P‚ÇÅ.map_comp_app
      -- conv =>
      --   lhs; enter [2, 2, 1]
      --   tactic => symm; exact P‚ÇÅ.map_comp_app
      -- conv =>
      --   lhs; enter [2, 2, 2]
      --   tactic => symm; exact P‚ÇÅ.map_comp_app
      -- conv =>
      --   lhs; enter [2]
      --   tactic =>
      --     have H : (lift (lift ((fp.fst ((X ‚äó X) ‚äó Z) Y) ‚â´ (fp.fst _ _) ‚â´ (fp.fst _ _) ‚â´ ùüô X) ((fp.fst _ _) ‚â´ (fp.fst _ _) ‚â´ (fp.snd _ _))) ((fp.fst _ _) ‚â´ (fp.snd _ _))) = fp.fst _ _ := by simp_proj
      --     exact T.ùîº_congr_app H
      -- conv =>
      --   rhs
      --   tactic =>
      --     have H : lift (lift ((fp.fst ((X ‚äó X) ‚äó Z) Y) ‚â´ (fp.fst _ _) ‚â´ (fp.fst _ _) ‚â´ ùüô X) ((fp.fst _ _) ‚â´ (fp.fst _ _) ‚â´ (fp.snd _ _))) ((fp.fst _ _) ‚â´ (fp.snd _ _)) = fp.fst _ _ := by simp_proj
      --     exact T.ùîº_congr_app H
      -- simp_proj_only
      -- simp
      -- simp at H

      -- -- conv at H =>
      -- --   lhs; enter [2, 1]
      -- --   tactic =>

      -- -- conv =>
      -- --   lhs; tactic => symm; exact T.exists_frob_right'
      -- -- apply (T.ùîº _).map.monotone
      -- -- rw [‚Üêinf_assoc]
      -- -- apply inf_le_inf_right
      -- -- simp_proj

      -- -- -- simp at H
      -- -- conv at H =>
      -- --   lhs; tactic => symm; exact T.exists_frob_right'
      -- -- have H := (T.ùîº _).adjTo H



      -- -- apply inf_le_inf_right at H



    congrCod := sorry
    unique   := sorry
    total    := sorry
